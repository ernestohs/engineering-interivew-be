openapi: 3.0.1
info:
  title: Task Management API
  description: API for managing tasks with different states
  version: 1.0.0
servers:
  - description: Development in local computer (using local DNS + local SSL).
    url: https://task.development.local
  - description: Development in local computer (using local DNS).
    url: http://task.development.local
  - description: Local service for development.
    url: http://localhost:{port}
    variables:
      port:
        default: "7450"
        enum:
          - "7450"
          - "8080"
tags:
  - name: Tasks
  - name: Reports
paths:
  /tasks:
    get:
      summary: Get all tasks
      operationId: tasks_getTasks
      parameters:
        - name: field
          in: query
          required: false
          schema:
            type: string
          description: field to sort by.
        - name: order
          in: query
          required: false
          schema:
            type: string
            enum:
              - DESC
              - ASC
            default: DESC
        - name: filter
          in: query
          required: false
          schema:
            type: string
          description: JSON object
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: perPage
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
      tags:
        - Tasks
    post:
      summary: Create a new task
      operationId: tasks_createTasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "201":
          description: Task created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
      tags:
        - Tasks
  /tasks/{taskId}:
    get:
      summary: Get a task by ID
      operationId: tasks_getTasksById
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Task details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404":
          description: Task not found
      tags:
        - Tasks
    put:
      summary: Update a task by ID
      operationId: tasks_updateTasks
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: Task updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404":
          description: Task not found
      tags:
        - Tasks
    delete:
      summary: Delete a task by ID
      operationId: tasks_deleteTasks
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Task deleted
        "404":
          description: Task not found
      tags:
        - Tasks
  /reports/tasks-by-status:
    get:
      summary: Get tasks by status
      operationId: reports_reportTaskByStatus
      parameters:
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum:
                - To do
                - In Progress
                - Done
                - Archived
      responses:
        "200":
          description: Lis of tasks by status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
      tags:
        - Reports
  /reports/summary:
    get:
      summary: Get summary of tasks
      operationId: reports_reportSummary
      responses:
        "200":
          description: Summary of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalTasks:
                    type: integer
                    example: 100
                  toDoTasks:
                    type: integer
                    example: 25
                  inProgressTasks:
                    type: integer
                    example: 50
                  doneTasks:
                    type: integer
                    example: 20
                  archivedTasks:
                    type: integer
                    example: 5
      tags:
        - Reports
  /reports/tasks-by-date:
    get:
      summary: Get tasks by date range
      operationId: reports_reportTaskByDate
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
            example: "2024-12-31"
      responses:
        '200':
          description: List of tasks within date range
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
      tags:
        - Reports
components:
  schemas:
    # Generic Schemas
    Field:
      description: >
        Field is a *generic* type that consists of two related data elements:

        A key, which is a constant that defines the data set (e.g., *color*, *price*),

        and a value, which is a variable that belongs to the set (e.g., *green*, *100*).
      properties:
        key:
          description: Field name.
          title: Key
          type: string
        value:
          description: Field value.
          title: Value
          type: string
      required:
        - key
        - value
      title: Field
      type: object
    Paginated:
      type: object
      properties:
        total:
          type: number
        page:
          type: number
        perPage:
          type: number
    Audited:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          example: 2022-07-21T17:32:28Z
        createdBy:
          type: string
          example: user@example.com
        updatedAt:
          type: string
          format: date-time
          example: 2023-08-10T13:23:15Z
        updatedBy:
          type: string
          example: user@example.com
      required:
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
    ResponseModel:
      description: Basic response model used as the base of all responses for HTTP.
      properties:
        success:
          description: Operation over client was successful.
          example: false
          title: Success
          type: boolean
        message:
          description: Human-readable description of the status message.
          title: Message
          type: string
        timestamp:
          description: Information identifying when a certain event occurred, usually
            giving date and time of day, sometimes accurate to a small fraction
            of a second.
          format: date-time
          title: Timestamp
          type: string
      required:
        - message
        - success
        - timestamp
      title: Response Model
      type: object
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseModel'
      description: |
        The standard interface of a correct and well-known
        error response [*Inherits from Response Model*].
      properties:
        code:
          description: |
            System Error Codes are very broad: each one can occur
            in one of many hundreds of locations in the system.
          format: int32
          maximum: 600
          minimum: 100
          title: Code
          type: integer
        data:
          description: Gets additional key-value pairs describing error details.
          items:
            allOf:
              - $ref: '#/components/schemas/Field'
          nullable: true
          title: Data
          type: array
      required:
        - code
      title: Error Response
      type: object

    # Error Responses
    ErrorResponseBadRequest:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      title: Bad Request Error Response
    ErrorResponseUnauthorized:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      title: Unauthorized Error Response
    ErrorResponseNotFound:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      title: Not Found Error Response
    ErrorResponseMethodNotAllowed:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      title: Method Not Allowed Error Response
    ErrorResponseConflict:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      title: Conflict Error Response
    ErrorResponsePreconditionFailed:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      title: Precondition Failed Error Response
    ErrorResponseUnprocessableEntity:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      title: Unprocessable Entity Error Response
    ErrorResponseInternalServerError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      title: Internal Server Error Response
    ErrorResponseServiceUnavailable:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      title: Service Unavailable Error Response
    # Models
    Task:
      allOf:
        - $ref: '#/components/schemas/Audited'
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "Sample Task"
        description:
          type: string
          example: "This is a sample task description."
        status:
          type: string
          enum:
            - To do
            - In Progress
            - Done
            - Archived
          example: "To do"
      required:
        - title
        - status
    TasksResponse:
      allOf:
        - $ref: '#/components/schemas/Paginated'
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
          uniqueItems: true
      type: object